// Code generated by MockGen. DO NOT EDIT.
// Source: filmsService.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	api "github.com/e1esm/FilmsAggregator/internal/models/api"
	db "github.com/e1esm/FilmsAggregator/internal/models/db"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockService) Add(arg0 context.Context, arg1 db.Film) (api.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(api.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockServiceMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockService)(nil).Add), arg0, arg1)
}

// Delete mocks base method.
func (m *MockService) Delete(ctx context.Context, requestedFilm api.DeleteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, requestedFilm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, requestedFilm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, requestedFilm)
}

// Get mocks base method.
func (m *MockService) Get(ctx context.Context, name string) ([]*api.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].([]*api.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), ctx, name)
}

// GetAll mocks base method.
func (m *MockService) GetAll(ctx context.Context) ([]api.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]api.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockService)(nil).GetAll), ctx)
}

// GetByActor mocks base method.
func (m *MockService) GetByActor(ctx context.Context, name string) ([]api.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByActor", ctx, name)
	ret0, _ := ret[0].([]api.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByActor indicates an expected call of GetByActor.
func (mr *MockServiceMockRecorder) GetByActor(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByActor", reflect.TypeOf((*MockService)(nil).GetByActor), ctx, name)
}

// GetByProducer mocks base method.
func (m *MockService) GetByProducer(ctx context.Context, name string) ([]api.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProducer", ctx, name)
	ret0, _ := ret[0].([]api.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProducer indicates an expected call of GetByProducer.
func (mr *MockServiceMockRecorder) GetByProducer(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProducer", reflect.TypeOf((*MockService)(nil).GetByProducer), ctx, name)
}
