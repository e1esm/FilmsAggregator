basePath: /
definitions:
  api.DeleteRequest:
    description: 'request, according to which a film is going to be deleted from the
      database. It has 3 filters: Genre, Title and ReleasedYear'
    properties:
      genre:
        description: A genre of the show to be deleted
        type: string
      released_year:
        description: A year of release of a show to be deleted
        type: integer
      title:
        description: A title of the show to be deleted
        type: string
    type: object
  api.Film:
    description: model's being operated on
    properties:
      crew:
        allOf:
        - $ref: '#/definitions/general.Crew'
        description: Crew that took a part in production
      genre:
        description: A genre of the show
        type: string
      released_year:
        description: Year the show was released in
        type: integer
      revenue:
        description: Revenue which was received by the show
        type: number
      title:
        description: Title of the show
        type: string
    type: object
  auth.Role:
    description: Value that represents user's right in the service.
    enum:
    - admin
    - guest
    type: string
    x-enum-comments:
      ADMIN: This role provides full access to the API
      GUEST: This role provides restricted access to the API - client gets only methods
        for observation.
    x-enum-varnames:
    - ADMIN
    - GUEST
  auth.SignInRequest:
    description: Model that represents user's input to sign in the service provided
    properties:
      password:
        description: Password of the user
        type: string
      username:
        description: Username of the user
        type: string
    type: object
  auth.User:
    description: Model that represents user's model, also the content of a body in
      the request to be signed up.
    properties:
      id:
        description: id of the user that's server-side generated
        type: string
      password:
        description: password of the client that is hashed on the server side
        type: string
      role:
        allOf:
        - $ref: '#/definitions/auth.Role'
        description: role of the user. Either guest or admin.
      username:
        description: username of the client. Must be unique
        type: string
    type: object
  general.Actor:
    description: Actor that took a part in the show
    properties:
      birthdate:
        type: string
      gender:
        type: string
      name:
        type: string
      role:
        description: Actor's role in the show
        type: string
    type: object
  general.Crew:
    description: The model of the crew which took part in shooting the show
    properties:
      actors:
        description: All actors took a part in the show
        items:
          $ref: '#/definitions/general.Actor'
        type: array
      producers:
        description: All producers that took a part in the show
        items:
          $ref: '#/definitions/general.Producer'
        type: array
    type: object
  general.Producer:
    description: producer of the show
    properties:
      birthdate:
        type: string
      gender:
        type: string
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Server for Films Aggregator application
  title: Films Aggregator
  version: "1.0"
paths:
  /api/actor/films/:
    get:
      description: Get all the films which a certain actor was shot in
      parameters:
      - description: Actor filter
        in: query
        name: actor
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Film'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "405":
          description: Method Not Allowed
        "500":
          description: Internal Server Error
      summary: Films actor took a part in
      tags:
      - actor
  /api/add/:
    post:
      consumes:
      - application/json
      description: Based on the body of POST request add film to the DB
      parameters:
      - description: film model
        in: body
        name: film
        required: true
        schema:
          $ref: '#/definitions/api.Film'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Film'
        "400":
          description: Bad Request
        "405":
          description: Method Not Allowed
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      summary: Add film to the DB
      tags:
      - film
  /api/all/:
    get:
      description: Get every available film from the DB
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Film'
            type: array
        "404":
          description: Not Found
        "405":
          description: Method Not Allowed
        "500":
          description: Internal Server Error
      summary: Get all the films from the DB
      tags:
      - films
  /api/delete/:
    delete:
      description: Delete film from both cache and main repositories based on the
        user's provided filters
      parameters:
      - description: Film title
        in: query
        name: title
        required: true
        type: string
      - description: Film genre
        in: query
        name: genre
        required: true
        type: string
      - description: Film release date
        in: query
        name: released_year
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.DeleteRequest'
        "400":
          description: Bad Request
        "405":
          description: Method Not Allowed
        "500":
          description: Internal Server Error
      security:
      - JWT: []
      summary: Delete film
      tags:
      - film
  /api/get/:
    get:
      description: Get all films with the specified name.
      parameters:
      - description: film title
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Film'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "405":
          description: Method Not Allowed
        "500":
          description: Internal Server Error
      summary: Get films with the specified name (there can be more than 1 film with
        the same name)
      tags:
      - films
  /api/producer/films/:
    get:
      description: Get all the films that'd been produced by a specified producer.
      parameters:
      - description: Producer filter
        in: query
        name: producer
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Film'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "405":
          description: Method Not Allowed
        "500":
          description: Internal Server Error
      summary: Films, which were produced by the specified person
      tags:
      - producer
  /api/signin/:
    post:
      consumes:
      - application/json
      description: Process authentication
      parameters:
      - description: Sign in model
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
        "405":
          description: Method Not Allowed
        "500":
          description: Internal Server Error
      summary: Sign in the service
      tags:
      - user
  /api/signup/:
    post:
      consumes:
      - application/json
      description: Create an account in the service
      parameters:
      - description: user model
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.User'
        "400":
          description: Bad Request
        "405":
          description: Method Not Allowed
        "500":
          description: Internal Server Error
      summary: Sign up to the service
      tags:
      - user
securityDefinitions:
  JWT:
    in: cookie
    name: jwt_token
    type: apiKey
swagger: "2.0"
